#include "tetradiplomix.h"

// Some simple utilities for Rcpp


double rgammadouble(int a, double b, double c)
{   Rcpp::NumericVector x = rgamma(a,b,1/c);
  return x(0);
}


//' Given a vector of parameters for different categories in 1...n,
//' simulate a Dirichlet random vector
//'
//' Takes a vector of counts for 1:n collections,
//' and returns a Dirichlet random variable generated by adding the prior to each
//' collection value, and simulating an alpha from a gamma distribution
//' with this shape parameter.
//'
//' The categories are labeled in C from 1 up to n.  n is the length of \code{lambda},
//' which is a vector of priors. Note that all elements of \code{lambda}
//' must be strictly greater than 0.
//' @keywords internal
//' @param C  a vector giving counts of categories
//' @param lambda priors for the categories
//' @export
// [[Rcpp::export]]
NumericVector dirch_from_params(NumericVector C) {
  int i;
  int n = C.length();
  NumericVector out(n);

  for(i = 0; i < n; i++) {
    out[i] = rgammadouble(1L, C[i], 1.0);
  }

  return(out / sum(out));
}



//' sample from 0:(n-1) given n probabilities
//'
//' boing
//' @export
//' @keywords internal
// [[Rcpp::export]]
int samp_from_vec(NumericVector V) {
  int C = V.length();
  int r, res;
  double cumul, rando;

  rando = runif(1)[0];
  V = V / sum(V);  // make sure they sum to one



  cumul = 0.0;
  for(r = 0; r < C; r++) {
    cumul += V[r];
    res = r;
    if(cumul >= rando) {
      break;
    }
  }

  return(res);
}

