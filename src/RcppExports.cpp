// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dirch_from_params
NumericVector dirch_from_params(NumericVector C);
RcppExport SEXP _tetradiplomix_dirch_from_params(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(dirch_from_params(C));
    return rcpp_result_gen;
END_RCPP
}
// samp_from_vec
int samp_from_vec(NumericVector V);
RcppExport SEXP _tetradiplomix_samp_from_vec(SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(samp_from_vec(V));
    return rcpp_result_gen;
END_RCPP
}
// diplomix
List diplomix(IntegerMatrix G, int reps);
RcppExport SEXP _tetradiplomix_diplomix(SEXP GSEXP, SEXP repsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    rcpp_result_gen = Rcpp::wrap(diplomix(G, reps));
    return rcpp_result_gen;
END_RCPP
}
// split_pile_alleles
void split_pile_alleles(IntegerMatrix G, IntegerMatrix Z, NumericMatrix out);
RcppExport SEXP _tetradiplomix_split_pile_alleles(SEXP GSEXP, SEXP ZSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type out(outSEXP);
    split_pile_alleles(G, Z, out);
    return R_NilValue;
END_RCPP
}
// update_zim
void update_zim(IntegerMatrix G, IntegerMatrix ZIM, IntegerMatrix ZM, NumericMatrix p);
RcppExport SEXP _tetradiplomix_update_zim(SEXP GSEXP, SEXP ZIMSEXP, SEXP ZMSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type ZIM(ZIMSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type ZM(ZMSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type p(pSEXP);
    update_zim(G, ZIM, ZM, p);
    return R_NilValue;
END_RCPP
}
// zed_matrix
IntegerMatrix zed_matrix();
RcppExport SEXP _tetradiplomix_zed_matrix() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(zed_matrix());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tetradiplomix_dirch_from_params", (DL_FUNC) &_tetradiplomix_dirch_from_params, 1},
    {"_tetradiplomix_samp_from_vec", (DL_FUNC) &_tetradiplomix_samp_from_vec, 1},
    {"_tetradiplomix_diplomix", (DL_FUNC) &_tetradiplomix_diplomix, 2},
    {"_tetradiplomix_split_pile_alleles", (DL_FUNC) &_tetradiplomix_split_pile_alleles, 3},
    {"_tetradiplomix_update_zim", (DL_FUNC) &_tetradiplomix_update_zim, 4},
    {"_tetradiplomix_zed_matrix", (DL_FUNC) &_tetradiplomix_zed_matrix, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tetradiplomix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
